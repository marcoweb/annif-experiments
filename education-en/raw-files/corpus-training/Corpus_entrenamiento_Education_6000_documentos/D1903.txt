#ITI#When Does Scaffolding Provide Too Much Assistance? A Code-Tracing Tutor Investigation#FTI#
#IRE# When students are first learning to program, they not only have to learn to write programs, but also how to trace them. Code tracing involves stepping through a program step-by-step, which helps to predict the output of the program and identify bugs. Students routinely struggle with this activity, as evidenced by prior work and our own experiences in the classroom. To address this, we designed a Code Tracing (CT)-Tutor. We varied the level of assistance provided in the tutor, based on (1) the interface scaffolding available during code tracing, and (2) instructional order, operationalized by when examples were provided, either before or after the corresponding problem was solved. We collected data by having participants use the tutor to solve code tracing problems (N = 97) and analyzed both learning outcomes and process data obtained by extracting features of interest from the log files. We used a multi-layered approach for the analysis, including standard inferential statistics and unsupervised learning to cluster students by their behaviors in the tutor. The results show that the optimal level of assistance for code tracing falls in the middle of the assistance spectrum included in the tutor, but also that there are individual differences in terms of optimal assistance for subgroups of individuals. Based on these results, we outline opportunities for future work around personalizing instruction for code tracing#FRE#
#IPC# Assistance; Code tracing; Programming instruction; Tutoring system; Worked examples#FPC#
#IRF# Adams D.M., McLaren B.M., Durkin K., Mayer R.E., Rittle-Johnson B., Isotani S., Van Velsen M., Using erroneous examples to improve mathematics learning with a web-based tutoring system, Computers in Human Behavior, 36, pp. 401-411, (2014); 
Aleven V., Koedinger K., An effective metacognitive strategy: Learning by doing and explaining with a computer-based cognitive tutor, Cognitive Science, 26, pp. 147-179, (2002); 
Aleven V., Roll I., McLaren B.M., Koedinger K.R., Help helps, but only so much: Research on help seeking with intelligent tutoring systems, International Journal of Artificial Intelligence in Education, 26, 1, pp. 205-223, (2016); 
Anderson J.R., Conrad F.G., Corbett A.T., Skill acquisition and the LISP tutor, Cognitive Science, 13, 4, pp. 467-505, (1989); 
Anderson J.R., Corbett A.T., Koedinger K.R., Pelletier R., Cognitive tutors: Lessons learned, The Journal of the Learning Sciences, 4, 2, pp. 167-207, (1995); 
Baker R.S., D'Mello S.K., Rodrigo M.M.T., Graesser A.C., Better to be frustrated than bored: The incidence, persistence, and impact of learners’ cognitive–affective states during interactions with three different computer-based learning environments, International Journal of Human-Computer Studies, 68, 4, pp. 223-241, (2010); 
Baker R.S., de Carvalho A.M.J.A., Raspat J., Aleven V., Corbett A.T., Koedinger K.R., Educational software features that encourage and discourage “gaming the system”, In Proceedings of the 14Th International Conference on Artificial Intelligence in Education, pp. 475-482, (2009); 
Baker R.S., Walonoski J., Heffernan N., Roll I., Corbett A., Koedinger K., Why students engage in “gaming the system” behavior in interactive learning environments, Journal of Interactive Learning Research, 19, 2, pp. 185-224, (2008); 
Bau D., Gray J., Kelleher C., Sheldon J., Turbak F., Learnable programming: Blocks and beyond, Communications of the ACM, 60, 6, pp. 72-80, (2017); 
Bennedsen J., Caspersen M.E., Failure rates in introductory programming, ACM SIGCSE Bulletin, 39, 2, pp. 32-36, (2007); 
Bhise R.B., Thorat S.S., Supekar A.K., Importance of data mining in higher education system, IOSR Journal Of Humanities And Social Science (IOSR-JHSS), 6, 6, (2013); 
Bhuiyan S., Greer J.E., McCalla G.I., Supporting the learning of recursive problem solving, Interactive Learning Environments, 4, 2, pp. 115-139, (1994); 
Blanca M.J., Alarcon R., Arnau J., Bono R., Bendayan R., Non-normal data: Is ANOVA still a valid option?, Psicothema, 29, 4, pp. 552-557, (2017); 
Blanca M.J., Arnau J., Lopez-Montiel D., Bono R., Bendayan R., Skewness and kurtosis in real data samples, Methodology, 9, pp. 78-84, (2013); 
Bonate P., Analysis of Pretest-Posttest Designs, (2000); 
Borracci G., Gauthier E., Jennings J., Sale K., Muldner K., The effect of assistance on learning and affect in an algebra tutor, Journal of Educational Computing Research, 57, 8, pp. 2032-2052, (2020); 
Brown N.C.C., Kolling M., Crick T., Peyton Jones S., Humphreys S., Sentance S., Bringing computer science back into schools: Lessons from the UK, Proceeding of the 44Th ACM Technical Symposium on Computer Science Education, pp. 269-274, (2013); 
Chi M.T.H., Bassok M., Lewis M.W., Reimann P., Glaser R., Self-explanations: How students study and use examples in learning to solve problems, Cognitive Science, 13, pp. 145-182, (1989); 
Chi M.T., Wylie R., The ICAP framework: Linking cognitive engagement to active learning outcomes, Educational Psychologist, 49, 4, pp. 219-243, (2014); 
Chi M.T., Siler S.A., Jeong H., Yamauchi T., Hausmann R.G., Learning from human tutoring, Cognitive Science, 25, 4, pp. 471-533, (2001); 
Conati C., Vanlehn K., Toward computer-based support of meta-cognitive skills: A computational framework to coach self-explanation, International Journal of Artificial Intelligence in Education, 11, pp. 389-415, (2000); 
Corbett A., Maclaren B., Wagner A., Kauffman L., Mitchell A., Baker R.S., Differential Impact of Learning Activities Designed to Support Robust Learning in the Genetics Cognitive Tutor, pp. 319-328, (2013); 
Costa J.M., Miranda G.L., Relation between Alice software and programming learning: A systematic review of the literature and meta-analysis, British Journal of Educational Technology, 48, 6, pp. 1464-1474, (2017); 
Craig S.D., Sullins J., Witherspoon A., Gholson B., The deep-level-reasoning-question effect: The role of dialogue and deep-level-reasoning questions during vicarious learning, Cognition and Instruction, 24, 4, pp. 565-591, (2006); 
Cunningham K., Blanchard S., Ericson B., Guzdial M., Using Tracing and Sketching to Solve Programming Problems: Replicating and Extending an Analysis of What Students Draw, pp. 164-172, (2017); 
Denny P., Luxton-Reilly A., Tempero E., Hendrickx J., Understanding the syntax barrier for novices, Proceedings of the 16Th Conference on Innovation and Technology in Computer Science Education, pp. 208-212, (2011); 
Driscoll D.M., Craig S.D., Gholson B., Ventura M., Hu X., Graesser A.C., Vicarious learning: Effects of overhearing dialog and monologue-like discourse in a virtual tutoring session, Journal of Educational Computing Research, 29, 4, pp. 431-450, (2003); 
Fabic G.V.F., Mitrovic A., Neshatian K., Evaluation of parsons problems with menu-based self-explanation prompts in a mobile python tutor, International Journal of Artificial Intelligence in Education, 29, 4, pp. 507-535, (2019); 
George D., Mallery P., IBM SPSS Statistics 26 Step by Step: A Simple Guide and Reference, (2019); 
Gilmore D.J., Green T.R.G., Programming plans and programming expertise, The Quarterly Journal of Experimental Psychology, 40, 3, pp. 423-442, (1988); 
Gobert J.D., Baker R.S., Wixon M.B., Operationalizing and detecting disengagement within online science microworlds, Educational Psychologist, 50, 1, pp. 43-57, (2015); 
Graesser A.C., Conversations with AutoTutor help students learn, International Journal of Artificial Intelligence in Education, 26, 1, pp. 124-132, (2016); 
Greer J.E., McCalla G.I., A computational framework for granularity and its application to educational diagnosis, Proceedings of the International Joint Conference on Artificial Intelligence, pp. 477-482, (1989); 
Greer J., McCalla G., Vassileva J., Deters R., Bull S., Kettel L., Lessons learned in deploying a multi-agent learning support system: The I-help experience, Proceedings of Artificial Intelligence in Education, pp. 410-421, (2001); 
Grover S., Pea R., Computational thinking in K–12: A review of the state of the field, Educational Researcher, 42, 1, pp. 38-43, (2013); 
Hertz M., Jump M., Trace-based teaching in early programming courses, Proceeding of the 44Th ACM Technical Symposium on Computer Science Education, pp. 561-566, (2013); 
Hosseini R., Brusilovsky P., A study of concept-based similarity approaches for recommending program examples, New Review of Hypermedia and Multimedia, 23, 3, pp. 161-188, (2017); 
Jennings J., Muldner K., Assistance that fades in improves learning better than assistance that fades out, Instructional Science, 48, 4, pp. 371-394, (2020); 
Kapur M., Productive failure in learning math, Cognitive Science, 38, 5, pp. 1008-1022, (2014); 
Kapur M., Examining productive failure, productive success, unproductive failure, and unproductive success in learning, Educational Psychologist, 51, 2, pp. 289-299, (2016); 
Kapur M., Bielaczyc K., Designing for productive failure, Journal of the Learning Sciences, 21, 1, pp. 45-83, (2012); 
Kassambara A., Practical Guide To Cluster Analysis in R: Unsupervised Machine Learning, STHDA, 1, (2017); 
Kumar A.N., A study of the influence of code-tracing problems on code-writing skills, Proceedings of the 18Th ACM Conference on Innovation and Technology in Computer Science Education, pp. 183-188, (2013); 
Lahtinen E., Ala-Mutka K., Jarvinen H.M., A study of the difficulties of novice programmers, ACM SIGCSE Bulletin, 37, 3, (2005); 
Lam M.S., Chan E.Y., Lee V.C., Yu Y.T., Designing an automatic debugging assistant for improving the learning of computer programming, Proceedings of the International Conference on Hybrid Learning and Education, pp. 359-370, (2008); 
Lee H.S., Betts S., Anderson J.R., Not taking the easy road: When similarity hurts learning, Memory & Cognition, 43, 6, pp. 939-952, (2015); 
Lee B., Muldner K., Instructional Video Design: Investigating the Impact of Monologue- and Dialogue-Style Presentations, 20, pp. 1-12, (2020); 
Lister R., Fidge C., Teague D., Further evidence of a relationship between explaining, tracing and writing skills in introductory programming, ACM SIGSE Bulletin, 41, 3, pp. 161-165, (2009); 
Loibl K., Roll I., Rummel N., Towards a theory of when and how problem solving followed by instruction supports learning, Educational Psychology Review, 29, 4, pp. 693-715, (2017); 
Lopez M., Whalley J., Robbins P., Lister R., Relationships between reading, tracing and writing skills in introductory programming, Proceedings of the Fourth International Workshop on Computing Education Research, pp. 101-112, (2008); 
McLaren B.M., van Gog T., Ganoe C., Karabinos M., Yaron D., The efficiency of worked examples compared to erroneous examples, tutored problem solving, and problem solving in computer-based learning environments, Computers in Human Behavior, 55, pp. 87-99, (2016); 
Muldner K., Conati C., Scaffolding meta-cognitive skills for effective analogical problem solving via tailored example selection, International Journal of Artificial Intelligence in Education, 20, 2, pp. 99-136, (2010); 
Muldner K., Burleson W., Van de Sande B., VanLehn K., An analysis of students’ gaming behaviors in an intelligent tutoring system: Predictors and impacts, User Modeling and User-Adapted Interaction, 21, 1-2, pp. 99-135, (2011); 
Muldner K., Lam R., Chi M.T., Comparing learning from observing and from human tutoring, Journal of Educational Psychology, 106, 1, pp. 69-85, (2014); 
Murphy L., Fitzgerald S., Lister R., McCauley R., Ability to 'explain in plain English' linked to proficiency in computer-based programming, Proceedings of the Ninth Annual International Conference on International Computing Education Research, pp. 111-118, (2012); 
Najar A.S., Mitrovic A., Examples and tutored problems: How can self-explanation make a difference to learning?, Proceedings of the International Conference on Artificial Intelligence in Education, pp. 339-348, (2013); 
Najar A.S., Mitrovic A., McLaren B.M., Learning with intelligent tutors and worked examples: Selecting learning activities adaptively leads to better learning outcomes than a fixed curriculum, User Modeling and User-Adapted Interaction, 26, 5, pp. 459-491, (2016); 
Nelson G.L., Xie B., Ko A.J., Comprehension first, Proceedings of the 2017 ACM Conference on International Computing Education Research, pp. 2-11, (2017); 
Price T.W., Dong Y., Lipovac D., ISnap: Towards intelligent tutoring in novice programming environments, Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education, pp. 483-488, (2017); 
Price T.W., Dong Y., Zhi R., Paassen B., Lytle N., Catete V., Barnes T., A comparison of the quality of data-driven programming hint generation algorithms, International Journal of Artificial Intelligence in Education, 29, 3, pp. 368-395, (2019); 
Renkl A., Toward an instructionally oriented theory of example-based learning, Cognitive Science, 38, 1, pp. 1-37, (2014); 
Rich P.J., Jones B.L., Belikov O., Yoshikawa E., Perkins M., Computing and engineering in elementary school: The effect of yearlong training on elementary teacher self-efficacy and beliefs about teaching computing and engineering, International Journal of Computer Science Education in Schools., 1, 1, pp. 1-20, (2017); 
Rittle-Johnson B., Loehr A.M., Durkin K., Promoting self-explanation to improve mathematics learning: A meta-analysis and instructional design principles, ZDM, 49, 4, pp. 599-611, (2017); 
Rivers K., Koedinger K.R., Data-driven hint generation in vast solution spaces: A self-improving python programming tutor, International Journal of Artificial Intelligence in Education, 27, 1, pp. 37-64, (2017); 
Salden R.J., Aleven V.A., Renkl A., Schwonke R., Worked examples and tutored problem solving: Redundant or synergistic forms of support?, Topics in Cognitive Science, 1, 1, pp. 203-213, (2009); 
Sale K., Muldner K., Learning with an algebra computer tutor: What type of hint is best?, Proceedings of Cognitive Science Conference, pp. 2708-2714, (2019); 
Sao Pedro M.A., Baker R.S., Gobert J.D., Montalvo O., Nakama A., Leveraging machine-learned detectors of systematic inquiry behavior to estimate and predict transfer of inquiry skill, User Modeling and User-Adapted Interaction, 23, 1, pp. 1-39, (2013); 
Schank P.K., Linn M.C., Clancy M.J., Supporting Pascal programming with an on-line template library and case studies, International Journal of Man-Machine Studies, 38, 6, pp. 1031-1048, (1993); 
Shovon M.H.I., Haque M., Prediction of student academic performance by an application of k-means clustering algorithm, International Journal of Advanced Research in Computer Science and Software Engineering, 2, 7, pp. 353-355, (2012); 
Simonsnowdon S., Explaining program code: Giving students the answer helps but only just, Proceedings of the 7Th Annual International ACM Conference on International Computing Education Research, pp. 93-99, (2011); 
Soloway E., Learning to program = learning to construct mechanisms and explanations, Communications of the ACM, 29, 9, pp. 850-858, (1986); 
Sweller J., Cooper G.A., The use of worked examples as a substitute for problem solving in learning algebra, Cognition and Instruction, 2, 1, pp. 59-89, (1985); 
Sweller J., Ayres P.L., Kalyuga S., Chandler P.A., The expertise reversal effect, Educational Psychologist, 38, 1, pp. 23-31, (2003); 
Tullis J.G., Goldstone R.L., Hanson A.J., Scheduling scaffolding: The extent and arrangement of assistance during training impacts test performance, Journal of Motor Behavior, 47, 5, pp. 442-452, (2015); 
Vainio V., Sajaniemi J., Factors in novice programmers’ poor tracing skills, ACM SIGCSE Bulletin, 39, 3, pp. 236-240, (2007); 
van Gog T., Effects of worked examples, example-problem, and problem-example pairs on novices’ learning, Computers & Education, 57, 2, pp. 1775-1779, (2011); 
van Gog T., Kester L., Paas F., Effects of worked examples, example-problem, and problem-example pairs on novices’ learning, Contemporary Educational Psychology, 36, 3, pp. 212-218, (2011); 
Venables A., Tan G., Lister R., A closer look at tracing, explaining and code writing skills in the novice programmer, Proceedings of the Fifth International Workshop on Computing Education Research Workshop, pp. 117-128, (2009); 
Wang Y., Nguyen H., Harpstead E., Stamper J., McLaren B.M., How does order of gameplay impact learning and enjoyment in a digital learning game?, In Proceedings of the International Conference on Artificial Intelligence in Education, pp. 518-531, (2019); 
Weerasinghe A., Mitrovic A., Facilitating deep learning through self-explanation in an open-ended domain, International Journal of Knowledge-based and Intelligent Engineering Systems, 10, 1, pp. 3-19, (2006); 
Weintrop D., Wilensky U., How block-based, text-based, and hybrid block/text modalities shape novice programming practices, International Journal of Child-Computer Interaction, 17, pp. 83-92, (2018); 
Whittall S.J., Prashandi W.A.C., Himasha G.L.S., de Silva D.I., Suriyawansa T.K., CodeMage: Educational programming environment for beginners, Proceedings of the 9Th International Conference on Knowledge and Smart Technology, pp. 311-316, (2017); 
Wing J.M., Computational thinking, Communications of the ACM, 49, 3, pp. 33-35, (2006); 
Wylie R., Chi M.T., The self-explanation principle in multimedia learning, The Cambridge Handbook of Multimedia Learning, pp. 413-432, (2014)#FRF#
