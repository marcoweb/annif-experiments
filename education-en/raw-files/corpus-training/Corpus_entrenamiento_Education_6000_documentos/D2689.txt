#ITI#Collaborative dialogue patterns of pair programming and their impact on programming self-efficacy and coding performance#FTI#
#IRE# The purpose of this study was to investigate the collaborative dialogue patterns of pair programming and their impact on programming self-efficacy and coding performance for both slow- and fast-paced students. Forty-six postgraduate students participated in the study. The students were asked to solve programming problems in pairs; those pairs' conversations were recorded when they worked on their tasks. Data analysis methods, including lag sequential analysis, cluster analysis and paired t-test, were employed, and the results showed that (1) four collaborative dialogue patterns emerged: Lecture, Guide, Question and Answer (Q&A), and Inquiry patterns; (2) Guide and Inquiry patterns significantly increased programming self-efficacy for both fast- and slow-paced students while Lecture and Q&A patterns significantly increased programming self-efficacy for slow-paced students but not for fast-paced students; (3) Guide and Inquiry patterns played a significant role in improving coding performance for slow-paced students. The study reveals a complex relationship between collaborative dialogue patterns with programming self-efficacy and coding performance, critically affecting students' pair programming quality. Further details of the findings are also discussed. Practitioner notes What is already known about this topic Pair programming is promising in promoting problem solving and knowledge transfer and is widely used in programming education. There are different patterns observed in the pair programming process. Collaborative dialogue patterns found in “expert-novice” pair programming were derived from a single programming task. What this paper adds Four collaborative dialogue patterns of pair programming emerged by increasing the different tasks and experiment duration and expanding the sample size, which further verified the stability of the similar patterns in previous studies. Four collaborative dialogue patterns showed different significant impacts on different students' programming self-efficacy and coding performance. This study presents the finer-grained characteristics of collaborative interaction in programmer pairs and contributes to the explanation regarding the different effects of pair programming reported in previous studies. Implications for practice and/or policy Four collaborative dialogue patterns can help the teachers understand the collaborative process of pair programming between fast- and slow-paced students. The collaborative dialogue patterns can be used to formulate effective intervention strategies to stimulate the process of collaboration in pairs and applied in future programming education to provide a new path for cultivating and promoting students' programming abilities. It is worth further investigating the impact of collaborative dialogue patterns on students' computational thinking#FRE#
#IPC# coding performance; collaborative dialogue pattern; pair programming; programming self-efficacy#FPC#
#IRF# Ayub M., Karnalim O., Risal L., Wijanto M.C., The impact of pair programming on the performance of slow-paced students: A study on data structure courses, Journal of Information and Organizational Sciences, 44, 2, pp. 211-229, (2020); 
Ayub M., Karnalim O., Risal R., Senjaya W.F., Wijanto M.C., Utilising pair programming to enhance the performance of slow-paced students on introductory pogramming, Journal of Technology and Science Education, 9, 3, pp. 357-367, (2019); 
Bakeman R., Gottman J.M., Observing interaction: An introduction to sequential analysis, (1986); 
Beck K., Extreme programming explained: Embrace change, (2000); 
Bergman L., Magnusson D., El-Khouri B., Studying individual development in an interindividual context. A person-oriented approach, (2003); 
Bowman N.A., Jarratt L., Culver K.C., Segre A.M., The impact of pair programming on college students' interest, perceptions, and achievement in computer science, ACM Transactions on Computing Education, 21, 3, pp. 1-19, (2021); 
Bryant S., Romero P., du Boulay B., The collaborative nature of pair programming, Extreme Programming and Agile Processes in Software Engineering. XP 2006, (2006); 
Chigona W., Pollock M., Pair programming for information systems students new to programming: Students' experiences and teachers' challenges, PICMET '08—2008 Portland International Conference on Management of Engineering & Technology, pp. 1587-1594, (2008); 
Demir O., Seferoglu S.S., The effect of determining pair programming groups according to various individual difference variables on group compatibility, flow, and coding performance, Journal of Educational Computing Research, 1, pp. 1-30, (2020); 
Dongo T., Reed A.H., O'Hara M., Exploring pair programming benefits for MIS majors, Journal of Information Technology Education: Innovations in Practice, 15, pp. 223-239, (2016); 
Faja S., Pair programming as a team-based learning activity: A review of research, Issues in Information Systems, 2, pp. 207-216, (2011); 
Graesser A.C., Person N.K., Magliano J.P., Collaborative dialogue patterns in naturalistic one-to-one tutoring, Applied Cognitive Psychology, 9, 6, pp. 495-522, (1995); 
Hanks B., Fitzgerald S., McCauley R., Murphy L., Zander C., Pair programming in education: A literature review, Computer Science Education, 21, 2, pp. 135-173, (2011); 
Howard E.V., Attitudes on using pair programming, Journal of Educational Technology Systems, 35, 1, pp. 89-103, (2006); 
Kavitha R., Ahmed M.I., Knowledge sharing through pair programming in learning environments: An empirical study, Education and Information Technologies, 20, pp. 319-333, (2015); 
Kazanidis I., The use of pair programming in the object oriented programming instruction, MIBES Transactions, 1, 11, pp. 40-47, (2017); 
King A., Transactive peer tutoring: Distributing cognition and metacognition, Educational Psychology Review, 10, 1, pp. 57-74, (1998); 
Kong S.C., Lai M., Sun D., Teacher development in computational thinking: Design and learning outcomes of programming concepts, practices and pedagogy, Computers & Education, 151, pp. 1-19, (2020); 
Koutsombogera M., Vogel C., Observing collaboration in small-group interaction, Multimodal Technologies and Interaction, 3, 3, (2019); 
Kuppuswami S., Vivekanandan K., The effects of pair programming on learning efficiency in short programming assignments, Informatics in Education, 2, pp. 251-266, (2004); 
Landis J.R., Koch G.G., The measurement of observer agreement for categorical data, Biometrics, 33, 1, pp. 159-174, (1977); 
Lin J., Singh S., Sha L., Tan W., Lang D., Gasevic D., Chen G., Is it a good move? Mining effective tutoring strategies from human–human tutorial dialogues, Future Generation Computer Systems, 127, pp. 194-207, (2022); 
Lin P.-C., Hou H.-T., Wu S.-Y., Chang K.-E., Exploring college students' cognitive processing patterns during a collaborative problem-solving teaching activity integrating Facebook discussion and simulation tools, The Internet and Higher Education, 22, pp. 51-56, (2014); 
Lin Y.P., Chang R.K., Tsai C.Y., The relationship between students' self-efficacy and basic programming concepts, (2016); 
McDowell C., Werner L., Bullock H.E., Fernald J., Pair programming improves student retention, confidence, and program quality, Communications of the ACM, 49, 8, pp. 90-95, (2006); 
Plonka L., Sharp H., Linder J.V.D., Dittrich Y., Knowledge transfer in pair programming: An in-depth analysis, International Journal of Human-Computer Studies, 73, pp. 66-78, (2015); 
Radermacher A., Walia G.S., Rummelt R., Assigning student programming pairs based on their mental model consistency: An initial investigation, Proceedings of the 43rd ACM Technical Symposium on Computer Science Education (SIGCSE), pp. 325-330, (2012); 
Rohatgi A., Scherer R., Hatlevik O.E., The role of ICT self-efficacy for students' ICT use and their achievement in a computer and information literacy test, Computers & Education, 102, pp. 103-116, (2016); 
Roscoe R.D., Chi M.T.H., Understanding tutor learning: Knowledge-building and knowledge-telling in peer tutors' explanations and questions, Review of Educational Research, 77, 4, pp. 534-574, (2007); 
Ruvalcaba O., Werner L., Denner J., Observations of pair programming: Variations in collaboration across demographic groups, Proceedings of the 47th ACM Technical Symposium on Computing Science Education, (2016); 
Sharma S., Applied multivariate techniques, (1996); 
Somervell J., Pair programming: Not for everyone?, Proceedings of the 2006 International Conference on Frontiers in Education: Computer science and Computer Engineering, pp. 303-307, (2006); 
Sun D., Ouyang F., Li Y., Chen H., Three contrasting pairs' collaborative programming processes in China's secondary education, Journal of Educational Computing Research, 59, 20, pp. 1-23, (2020); 
Taber K.S., The use of Cronbach's alpha when developing and reporting research instruments in science education, Research in Science Education, 48, 6, pp. 1273-1296, (2018); 
Tan J.B., Wu S.S., Wu L., Li Y., Analysis on the interaction mode of "Expert-Novice" pair programming based on behavior sequence, E-education Research, 43, 7, pp. 106-113, (2022); 
Tsai M.J., Wang C.Y., Hsu P.F., Developing the computer programming self-efficacy scale for computer literacy education, Journal of Educational Computing Research, 56, 1, pp. 1-16, (2018); 
Tsan J., Vandenberg J., Zakaria Z., Boulden D.C., Lynch C.F., Wiebe E.N., Et al., Collaborative dialogue and types of conflict: An analysis of pair programming interactions between upper elementary students, SIGCSE '21: The 52nd ACM Technical Symposium on Computer Science Education, (2021); 
Wei X., Lin L., Meng N., Tan W., Kong S.-C., Kinshuk K., The effectiveness of partial pair programming on elementary school students' computational thinking skills and self-efficacy, Computers & Education, 160, (2020); 
Williams L., Kessler R., Pair programming illuminated, (2002); 
Wing J.M., Computational thinking, Communications of the ACM, 49, 3, pp. 33-35, (2006); 
Wu B., Hu Y., Ruis A.R., Wang M., Analysing computational thinking in collaborative programming: A quantitative ethnography approach, Journal of Computer Assisted Learning, 35, 3, pp. 421-434, (2019); 
Yadav A., Mayfield C., Moudgalya S.K., Kussmaul C., Hu H.H., Collaborative learning, self-efficacy, and student performance in CS1 POGIL, SIGCSE '21: The 52nd ACM Technical Symposium on Computer Science Education, (2021); 
Ying K.M., Pezzullo L.G., Ahmed M., Et al., In their own words: Gender differences in student perceptions of pair programming, Proceedings of the 50th ACM Technical Symposium on Computer Science Education, pp. 1053-1059, (2019); 
Zakaria Z., Boulden D., Vandenberg J., Tsan J., Boyer K.E., Collaborative talk across two pair-programming configurations, International Conference on Computer Supported Collaborative Learning, 7, pp. 224-231, (2019); 
Zieris F., Prechelt L., Observations on knowledge transfer of professional software developers during pair programming, International Conference on Software Engineering Companion, pp. 242-250, (2016); 
Zieris F., Prechelt L., Explaining pair programming session dynamics from knowledge gaps, 42nd International Conference on Software Engineering, pp. 421-432, (2020)#FRF#
