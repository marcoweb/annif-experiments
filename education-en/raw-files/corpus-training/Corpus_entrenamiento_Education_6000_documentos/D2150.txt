#ITI#Using an automated assessment tool to explore difficulties of middle school students in introductory programming#FTI#
#IRE# This study investigated common student errors and underlying difficulties of two groups of Chinese middle school students in an introductory Python programming course using data in the automated assessment tool (AAT) Mulberry. One group of students was from a typical middle school while the other group was from a high-ability middle school. By analyzing 8030 erroneous student programs, we identified 12 common errors of the two groups. Further analysis indicated that the two groups had similarities and differences in the difficulties of learning to program. Our findings suggest that using AATs can effectively help teachers understand student difficulties in introductory programming#FRE#
#IPC# automated assessment tools; common errors; difficulties; Introductory programming#FPC#
#IRF# Albrecht E., Grabowski J., Sometimes it’s just sloppiness studying students’ programming errors and misconceptions, Annual Conference on Innovation and Technology in Computer Science Education, ITiCSE, pp. 340-345, (2020); 
Altadmri A., Brown N.C.C., 37 million compilations: Investigating novice programming mistakes in large-scale student data, Proceedings of the 46th ACM Technical Symposium on Computer Science Education, pp. 522-527, (2015); 
Becker B.A., An effective approach to enhancing compiler error messages, Proceedings of the 47th ACM Technical Symposium on Computing Science Education–SIGCSE ’16, pp. 126-131, (2016); 
Bennedsen J., Caspersen M.E., An investigation of potential success factors for an introductory model-driven programming course, Proceedings of the 2005 International Workshop on Computing Education Research–ICER ’05, pp. 155-163, (2005); 
Bergin S., Reilly R., Programming: Factors that influence success, ACM SIGCSE Bulletin, 37, 1, pp. 411-415, (2005); 
Brown N.C.C., Altadmri A., Novice java programming mistakes: Large-scale data vs. educator beliefs, ACM Transactions on Computing Education, 17, 2, pp. 1-21, (2017); 
Carlsen W., Domains of teacher knowledge, Examining pedagogical content knowledge: The construct and its implications for science education, pp. 133-144, (1999); 
Carter K., Ormrod J., Acquisition of formal operations by intellectually gifted children, Gifted Child Quarterly, 26, 3, pp. 110-114, (1982); 
Clancy M.J., Misconceptions and attitudes that interfere with learning to program, Computer science education research, pp. 85-100, (2004); 
Clancy M.J., Linn M.C., Patterns and pedagogy, ACM SIGCSE Bulletin, 31, 1, pp. 37-42, (1999); 
(2016); 
Denny P., Luxton-Reilly A., Tempero E., Hendrickx J., Understanding the syntax barrier for novices, Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education–ITiCSE ’11, (2011); 
Denny P., Luxton-Reilly A., Tempero E., Hendrickx J., CodeWrite: Supporting student-driven practice of Java, SIGCSE’11–Proceedings of the 42nd ACM Technical Symposium on Computer Science Education, pp. 471-476, (2011); 
Douce C., Livingstone D., Orwell J., Automatic test-based assessment of programming, Journal on Educational Resources in Computing, 5, 3, pp. 4-13, (2005); 
Edwards S.H., Kandru N., Rajagopal M.B.M., Investigating static analysis errors in student Java programs, (2017); 
Fisler K., Krishnamurthi S., Siegmund J., Modernizing plan-composition studies, Proceedings of the 47th ACM Technical Symposium on Computing Science Education–SIGCSE ’16, pp. 211-216, (2016); 
Fitzgerald S., Lewandowski G., McCauley R., Murphy L., Simon B., Thomas L., Zander C., Debugging: Finding, fixing and flailing, a multi-institutional study of novice debuggers, Computer Science Education, 18, 2, pp. 93-116, (2008); 
Ginat D., Menashe E., Taya A., Novice difficulties with interleaved pattern composition, Informatics in schools. Sustainable informatics education for pupils of all ages, pp. 57-67, (2013); 
Grover S., Basu S., Measuring student learning in introductory block-based programming: Examining misconceptions of loops, variables, and Boolean logic, Proceedings of the Conference on Integrating Technology into Computer Science Education, ITiCSE, pp. 267-272, (2017); 
Grover S., Pea R., Cooper S., Designing for deeper learning in a blended computer science course for middle school students, Computer Science Education, 25, 2, pp. 199-237, (2015); 
Guzdial M., Learner-Centered Design of Computing Education: Research on Computing for Everyone, Synthesis Lectures on Human-Centered Informatics, 8, 6, pp. 1-165, (2015); 
Hristova M., Misra A., Rutter M., Mercuri R., Identifying and correcting Java programming errors for introductory computer science students, Proceedings of the 34th SIGCSE Technical Symposium on Computer Science Education, pp. 153-156, (2003); 
Huitt W., Hummel J., Piaget’s theory of cognitive development, Educational Psychology Interactive, 3, 2, pp. 1-5, (2003); 
Ihantola P., Ahoniemi T., Karavirta V., Seppala O., Review of recent systems for automatic assessment of programming assignments, Proceedings of the 10th Koli Calling International Conference on Computing Education Research–Koli Calling ’10, (2010); 
Jackson J., Cobb M., Carver C., Identifying top Java errors for novice programmers, Proceedings Frontiers in Education 35th Annual Conference, (2005); 
Kaczmarczyk L.C., Petrick E.R., East J.P., Herman G.L., Identifying student misconceptions of programming, Proceedings of the 41st ACM Technical Symposium on Computer Science Education, pp. 107-111, (2010); 
Kohn T., The error behind the message: Finding the cause of error messages in python, SIGCSE 2019–Proceedings of the 50th ACM Technical Symposium on Computer Science Education, pp. 524-530, (2019); 
Lister R., Adams E.S., Fitzgerald S., Fone W., Hamer J., Lindholm M., Mccartney R., Mostrom J.E., Sanders K., Seppala O., Simon B., Thomas L., A multi-national study of reading and tracing skills in novice programmers, Proceedings of the Conference on Integrating Technology into Computer Science Education, ITiCSE, pp. 119-150, (2004); 
Lister R., Simon B., Thompson E., Whalley J.L., Prasad C., Not seeing the forest for the trees: Novice programmers and the SOLO taxonomy, Proceedings of the 11th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education–ITICSE ’06, 38, 3, pp. 118-122, (2006); 
McCall D., Kolling M., (2014); 
McCauley R., Fitzgerald S., Lewandowski G., Murphy L., Simon B., Thomas L., Zander C., Debugging: A review of the literature from an educational perspective, Computer Science Education, 18, 2, pp. 67-92, (2008); 
(2018); 
Muller O., Ginat D., Haberman B., Pattern-oriented instruction and its influence on problem decomposition and solution construction, Proceedings of the 12th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education, pp. 151-155, (2007); 
Pettit R.S., Homer J., Gee R., Do enhanced compiler error messages help students?, Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education–SIGCSE ’17, pp. 465-470, (2017); 
Piaget J., Cognitive development in children: Piaget development and learning, Journal of Research in Science Teaching, 2, 3, pp. 176-186, (1964); 
Prather J., Pettit R., McMurry K., Peters A., Homer J., Cohen M., Metacognitive difficulties faced by novice programmers in automated assessment tools, ICER 2018–Proceedings of the 2018 ACM Conference on International Computing Education Research, pp. 41-50, (2018); 
(2019); 
Qian Y., Hambrusch S., Yadav A., Gretter S., Li Y., Teachers’ perceptions of student misconceptions in introductory programming, Journal of Educational Computing Research, 58, 2, pp. 364-397, (2020); 
Qian Y., Lehman J., Students’ misconceptions and other difficulties in introductory programming: A literature review, ACM Transactions on Computing Education, 18, 1, pp. 1-24, (2017); 
Qian Y., Lehman J., Using technology to support teaching computer science: A study with middle school students, EURASIA Journal of Mathematics, Science and Technology Education, 14, 12, (2018); 
Qian Y., Lehman J., An investigation of high school students’ errors in introductory programming: A data-driven approach, Journal of Educational Computing Research, 58, 5, pp. 919-945, (2020); 
Ragonis N., Ben-Ari M., A long-term investigation of the comprehension of OOP concepts by novices, Computer Science Education, 15, 3, pp. 203-221, (2005); 
Sadler P.M., Sonnert G., Coyle H.P., Cook-Smith N., Miller J.L., The influence of teachers’ knowledge on student learning in middle school physical science classrooms, American Educational Research Journal, 50, 5, pp. 1020-1049, (2013); 
Sajaniemi J., Kuittinen M., An experiment on using roles of variables in teaching introductory programming, Computer Science Education, 15, 1, pp. 59-82, (2005); 
Schorsch T., CAP: An automated self-assessment tool to check Pascal programs for syntax, logic and style errors, ACM SIGCSE Bulletin, 27, 1, pp. 168-172, (1995); 
Shulman L., Those who understand: Knowledge growth in teaching, Educational Researcher, 15, 2, pp. 4-14, (1986); 
Simon A.L.R., Ajanovski V.V., Fouh E., Gonsalvez C., Leinonen J., Parkinson J., Poole M., Thota N., Pass rates in introductory programming and in other STEM disciplines, Annual Conference on Innovation and Technology in Computer Science Education, ITiCSE, pp. 53-71, (2019); 
Sirkia T., Sorva J., Exploring programming misconceptions: An analysis of student mistakes in visual program simulation exercises, 12th Koli Calling International Conference on Computing Education Research, pp. 19-28, (2012); 
Sleeman D., Putnam R.T., Baxter J., Kuspa L., Pascal and high school students: A study of errors, Journal of Educational Computing Research, 2, 1, pp. 5-23, (1986); 
Smith R., Rixner S., The error landscape: Characterizing the mistakes of novice programmers, SIGCSE 2019–Proceedings of the 50th ACM Technical Symposium on Computer Science Education, pp. 538-544, (2019); 
Soloway E., Learning to program = learning to construct mechanisms and explanations, Communications of the ACM, 29, 9, pp. 850-858, (1986); 
Sorva J., Notional machines and introductory programming education, ACM Transactions on Computing Education, 13, 2, pp. 1-31, (2013); 
Spohrer J.C., Soloway E., Novice mistakes: Are the folk wisdoms correct?, Communications of the ACM, 29, 7, pp. 624-632, (1986); 
Tabet N., Gedawy H., Alshikhabobakr H., Razak S., From Alice to python. Introducing text-based programming in middle schools, 2016 ACM Conference on Innovation and Technology in Computer Science Education, pp. 124-129, (2016); 
Taylor C., Zingaro D., Porter L., Webb K.C., Lee C.B., Clancy M., Computer science concept inventories: Past and future, Computer Science Education, 24, 4, pp. 253-276, (2014); 
Teague D., Lister R., Programming: Reading, writing and reversing, pp. 285-290, (2014); 
Watson C., Li F.W.B., Failure rates in introductory programming revisited, Proceedings of the 2014 Conference on Innovation & Technology in Computer Science Education–ITiCSE ’14, (2014); 
Webb M., Davis N., Bell T., Katz Y., Reynolds N., Chambers D.P., Syslo M.M., Computer science in K-12 school curricula of the 2lst century: Why, what and when?, Education and Information Technologies, 22, 2, pp. 445-468, (2017); 
Yadav A., Berges M., Computer science pedagogical content knowledge: Characterizing teacher performance, ACM Transactions on Computing Education, 19, 3, pp. 1-24, (2019)#FRF#
